# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

pool:
  vmImage: 'ubuntu-latest'

stages:
#  - template: templates/stages.yml
#    parameters:
#      library-name: my-library
  - stage: init
    displayName: Init
    jobs:
      - job: prepare
        steps:
        - pwsh: |
             [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
             $uriLogs = "$($env:SYSTEM_TEAMFOUNDATIONCOLLECTIONURI)$env:SYSTEM_TEAMPROJECTID/_apis/build/builds/$env:BUILD_BUILDID/logs?api-version=5.0"
             $response = Invoke-RestMethod -Uri $uriLogs -Method Get -Headers @{ Authorization = "Bearer $env:system_accesstoken"}
             $logUrl = $response.value[-1].url
             $webContent = Invoke-WebRequest -Uri $logUrl -Method GET -Headers @{ Authorization = "Bearer $env:system_accesstoken"}
             Write-Output "webContent " $webContent
             $ErrorMessage = $webContent.Content.tostring() -split "[`r`n]" | select-string "[[error]]"
             Write-Output "Error lines found " $ErrorMessage
             foreach($webContent.Content in $webContent.Content.value)
             {
             }
          env:
            system_accesstoken: $(System.AccessToken)
        
        - script: echo Hello, world!
          displayName: 'Run a one-line script'

        - script: |
            chmod +x run-docker-with-proxy.sh
            ./run-docker-with-proxy.sh
            echo final end !
          displayName: 'Run a multi-line script'
        - task: Bash@3
          name: mystep
          inputs:
            targetType: 'inline'
            script: |
              # Write your commands here
              export samplevar=myvalue
              echo "##vso[task.setvariable variable=vsoVar;isOutput=true]$samplevar"
              echo 'Hello world'
      - job: use
        dependsOn: prepare
        variables:
          the_previous_variable:  $[ dependencies.prepare.outputs['mystep.vsoVar'] ]
        steps:
        - script: echo Hello, world!
          displayName: 'Run a one-line script'
        - task: Bash@3
          inputs:
            targetType: 'inline'
            script: |
              # Write your commands here
              
              echo "Hello world in second bash: $(the_previous_variable)"
 #     - job: docker_container
 #       container: ubuntu:18.04
 #       steps:
 #       - script: printenv
